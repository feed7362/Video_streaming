services:
  bff:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: bff_service
    expose:
      - "8000"
    depends_on:
      - postgres
      - ffmpeg
      - minio
      - rabbitmq

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend_service
    expose:
      - "8001"
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    env_file:
      - ../backend/src/database.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    expose:
      - "${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 1m30s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  ffmpeg:
    build:
      context: ../services/convertor
      dockerfile: Dockerfile
    container_name: ffmpeg_service
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    tty: true
    stdin_open: true
    depends_on:
      rabbitmq:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    container_name: minio_service
    env_file:
      - ../backend/src/s3.env
    expose:
      - "9000"
      - "9001"
    restart: unless-stopped
    hostname: minio
    environment:
      MINIO_BROWSER_REDIRECT_URL: http://localhost/minio/ui
#      MINIO_PROMETHEUS_URL :
    command: minio server /minio_data --console-address ":9001"
    volumes:
      - minio_data:/minio_data
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: nginx_gateway
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ../gateway/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - bff
      - frontend

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: rabbit_service
    restart: always
    expose:
      - "5672"
      - "15672"
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 10s
      timeout: 5s
      retries: 5

#  promtail:
#    image: grafana/promtail:latest
#    container_name: promtail
#    ports:
#      - "9080:9080"
#    volumes:
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ./promtail-config.yaml:/etc/promtail/config.yml
#    command: -config.file=/etc/promtail/config.yml
#    privileged: true
#
#  loki:
#    image: grafana/loki:latest
#    container_name: loki
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./loki-config.yaml:/etc/loki/local-config.yaml
#
#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheusdata:/prometheus
#
#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    volumes:
#      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
#      - grafanadata:/var/lib/grafana


networks:
  default:
    name: video_streaming_network
    external: true

volumes:
  minio_data:
#  grafanadata:
#  prometheusdata:
# docker compose -p video_streaming_stack -f ./Docker/docker-compose.yml build
# docker compose -p video_streaming_stack -f ./Docker/docker-compose.yml up -d

#docker compose -p video_streaming_stack -f ./Docker/docker-compose.yml up -d --build
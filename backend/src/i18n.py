import gettext

from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware


class TranslationWrapper:
    _instance = None

    def __init__(self):
        self.translations = None

    def __new__(cls):
        """
        Create a new instance of the class if it doesn't
        exist, otherwise return the existing instance.

        Returns:
            TranslationWrapper: The instance of the class.
        """
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.init_translation()
        return cls._instance

    def init_translation(self):
        lang = "en"
        locales_dir = r"./translations"

        self.translations = gettext.translation(
            "messages", localedir=locales_dir, languages=[lang], fallback=True
        )
        self.translations.install()

    def gettext(self, message: str) -> str:
        return self.translations.gettext(message)


async def set_locale(request: Request):
    """
    Set the locale based on the request headers.

    This method retrieves the accept-language header
    from the request and sets the locale accordingly.

    Args:
        request (Request): The incoming request object.
    """
    translation_wrapper = TranslationWrapper()

    lang = request.headers.get("Accept-Language", "en")
    locales_dir = r"src/translations"

    translation_wrapper.translations = gettext.translation(
        "messages", localedir=locales_dir, languages=[lang], fallback=True
    )

    translation_wrapper.translations.install()


class LanguageMiddleware(BaseHTTPMiddleware):
    """
    Middleware for setting the language based on the
    request headers.

    This middleware sets the language of the application
    based on the Accept-Language header in the incoming
    request. It uses the set_locale function from the i18n
    module to determine the appropriate language for the request.

    Attributes:
        None
    """

    async def dispatch(self, request: Request, call_next):
        """
        Dispatch method to set the language for the request.

        This method intercepts incoming requests, sets the
        language based on the Accept-Language header, and then
        passes the request to the next middleware or route handler.

        Args:
            request (Request): The incoming request.
            call_next (Callable): The function to call to proceed
            to the next middleware or route handler.

        Returns:
            Response: The response generated by the next middleware
            or route handler.
        """
        await set_locale(request)
        response = await call_next(request)
        return response


def _(message: str) -> str:
    translation_wrapper = TranslationWrapper()
    return translation_wrapper.gettext(message)


# pybabel extract -o ./translations/messages.pot .

# pybabel init -i ./translations/messages.pot -d ./translations -l en
# pybabel init -i ./translations/messages.pot -d ./translations -l uk

# pybabel compile -d ./translations

name: "CI for dev branch"

on:
  push:
    branches: [ "dev" ]
  workflow_dispatch:

env:
  UV_CACHE_DIR: "~/.cache/uv"

jobs:
  # ---------------- Python lint/type-check ----------------
  lint-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [ backend, services/convertor, services/auth, services/moderation ]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: 3.12
      - uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          uv sync --frozen
          uv lock

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: ${{ runner.os }}-uv-${{ matrix.service }}

      # --------- LINTING ----------
      - name: Run Ruff
        run: |
          cd ${{ matrix.service }}
          uvx ruff@latest check .

      - name: Run Black
        run: |
          cd ${{ matrix.service }}
          uvx black@latest --check .

      - name: Run Mypy
        run: |
          cd ${{ matrix.service }}
          uvx mypy@latest --install-types --non-interactive . --config-file pyproject.toml

      # --------- TESTING + COVERAGE ----------
      - name: Install dependencies and run tests
        run: |
          cd ${{ matrix.service }}
          uv sync --frozen
          uv run pytest tests/ --junitxml=report.xml

      - name: Prepare artifact metadata
        id: prepare-artifact
        run: |
          sanitized="${{ matrix.service }}"
          sanitized="${sanitized#services/}"
          sanitized="${sanitized//\//-}"

          # coverage
          echo "coverage_name=coverage-report-${sanitized}" >> $GITHUB_OUTPUT
          echo "coverage_path=${{ matrix.service }}/report.xml" >> $GITHUB_OUTPUT

          # audit
          echo "audit_name=audit-${sanitized}" >> $GITHUB_OUTPUT
          echo "audit_path=${{ matrix.service }}/audit.json" >> $GITHUB_OUTPUT

          # license
          echo "license_name=licenses-${sanitized}" >> $GITHUB_OUTPUT
          echo "license_path=${{ matrix.service }}/licenses.json" >> $GITHUB_OUTPUT


      - name: Upload per-service coverage report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare-artifact.outputs.coverage_name }}
          path: ${{ steps.prepare-artifact.outputs.coverage_path }}
          if-no-files-found: warn
          overwrite: true

      # --------- SECURITY ----------
      - name: Run pip-audit (extra dep scanning)
        run: |
          cd ${{ matrix.service }}
          uvx pip-audit@latest > audit.json || true

      - name: Upload per-service audit report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare-artifact.outputs.audit_name }}
          path: ${{ steps.prepare-artifact.outputs.audit_path }}
          if-no-files-found: warn
          overwrite: true

      # --------- LICENSE ----------
      - name: Check licenses
        run: |
          cd ${{ matrix.service }}
          uvx pip-licenses@latest --from=mixed --with-authors --with-urls > licenses.json

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare-artifact.outputs.license_name }}
          path: ${{ steps.prepare-artifact.outputs.license_path }}
          if-no-files-found: warn
          overwrite: true

  # ---------------- Npm lint/tests ----------------
  lint-npm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ frontend ]
        node-version: [ 20,21,22 ]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm install --prefer-offline

      - name: Lint
        run: |
          cd ${{ matrix.service }}
          npm run lint

      - name: Test
        run: |
          cd ${{ matrix.service }}
          npm test

      - name: Security scan
        run: |
          cd ${{ matrix.service }}
          npm audit

      - name: Check licenses (npm)
        run: |
          if [ -f package.json ]; then npx license-checker --json > licenses.json ; fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

      - name: Debug workflow_run
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Workflow name: ${{ github.event.workflow_run.name }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"

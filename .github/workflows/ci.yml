name: Continuous Integration

on:
  push:
    branches: [ "dev" ]
  workflow_dispatch:

env:
  UV_CACHE_DIR: "~/.cache/uv"

jobs:
  # ---------------- pre-commit hooks ----------------
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run pre-commit in Docker
        run: |
          docker run --rm -v $PWD:/repo -w /repo pre-commit/pre-commit:latest \
          pre-commit run --all-files > pre-commit-report.txt || true

      - name: Upload pre-commit report
        uses: actions/upload-artifact@v4
        with:
          name: pre-commit-report
          path: pre-commit-report.txt

  # ---------------- Python lint/type-check ----------------
  lint-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [ backend, services/convertor, services/auth, services/moderation ]
        python-version: [ 3.11,3.12 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          uv sync --frozen
          uv lock

      - name: Cache uv
        uses: actions/cache@v3
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: ${{ runner.os }}-uv-${{ matrix.service }}

      # --------- LINTING ----------
      - name: Run Ruff
        run: |
          cd ${{ matrix.service }}
          uvx ruff@latest check .

      - name: Run Black
        run: |
          cd ${{ matrix.service }}
          uvx black@latest --check .

      - name: Run Mypy
        run: |
          cd ${{ matrix.service }}
          uvx mypy@latest --install-types --non-interactive . --config-file pyproject.toml

      # --------- TESTING + COVERAGE ----------
      - name: Install dependencies and run tests
        run: |
          cd ${{ matrix.service }}
          uvx pytest@latest tests/ --junitxml=report.xml


      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ matrix.service }}/coverage.xml

      # --------- SECURITY ----------
      - name: Run Safety (dependency vulnerability check)
        run: |
          cd ${{ matrix.service }}
          uvx safety@latest check --full-report

      - name: Run pip-audit (extra dep scanning)
        run: |
          cd ${{ matrix.service }}
          uvx pip-audit@latest || true

      # --------- SECRETS ----------
      - name: Run Gitleaks (secrets detection)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-banner --redact

      # --------- LICENSE ----------
      - name: Check licenses
        run: |
          cd ${{ matrix.service }}
          uvx pip-licenses@latest --from=mixed --with-authors --with-urls

  # ---------------- Npm lint/tests ----------------
  lint-npm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ frontend ]
        node-version: [ 20,21,22 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm install --prefer-offline

      - name: Lint
        run: |
          cd ${{ matrix.service }}
          npm run lint

      - name: Test
        run: |
          cd ${{ matrix.service }}
          npm test

      - name: Security scan
        run: |
          cd ${{ matrix.service }}
          npm audit || true

      - name: Check licenses (npm)
        run: |
          if [ -f package.json ]; then npx license-checker --json > licenses.json || true; fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  # ---------------- Python build (per service) ----------------
#  build-python:
#    runs-on: ubuntu-latest
#    needs: lint-python
#    strategy:
#      matrix:
#        service: [ backend, services/convertor, services/auth, services/moderation ]
#        python-version: [ 3.11, 3.12 ]
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: ${{ matrix.python-version }}
#      - uses: astral-sh/setup-uv@v6
#
#      - name: Cache uv
#        uses: actions/cache@v3
#        with:
#        path: ${{ env.UV_CACHE_DIR }}
#        key: ${{ runner.os }}-uv-${{ matrix.service }}
#
#      - name: Install dependencies
#        run: |
#          cd ${{ matrix.service }}
#          uv lock
#          uv sync --frozen
#
#      - name: Build (optional)
#        run: |
#          cd ${{ matrix.service }}
#          uv build

#  create-pr-to-main:
#    name: Create Pull Request to main
#    needs: ci-dev  # job с тестами и линтингом
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Create Pull Request
#        uses: peter-evans/create-pull-request@v5
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          commit-message: "Sync dev -> main after successful CI"
#          branch: dev
#          base: main
#          title: "Update main from dev"
#          body: "Automatic PR from dev to main after successful CI"
